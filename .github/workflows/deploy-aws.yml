name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Manual trigger

env:
  AWS_REGION: eu-west-1
  ECR_BACKEND_REPOSITORY: monopoly-game-backend
  ECR_REDIS_REPOSITORY: monopoly-game-redis
  ECS_CLUSTER: monopoly-game-cluster
  ECS_BACKEND_SERVICE: monopoly-game-backend
  ECS_REDIS_SERVICE: monopoly-game-redis

jobs:
  # Job 1: Build and push Docker images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build, tag, and push Backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd monopoly-backend
          docker build -t $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest
          echo "backend_image=$ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: üèóÔ∏è Build, tag, and push Redis image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd monopoly-redis
          docker build -t $ECR_REGISTRY/$ECR_REDIS_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REDIS_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REDIS_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REDIS_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REDIS_REPOSITORY:latest

  # Job 2: Deploy to ECS
  deploy-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: ‚ôªÔ∏è Force ECS Backend deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_BACKEND_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: ‚ôªÔ∏è Force ECS Redis deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_REDIS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: ‚è≥ Wait for Backend service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_BACKEND_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: ‚è≥ Wait for Redis service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_REDIS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

      - name: ‚úÖ Deployment complete
        run: |
          echo "üéâ Deployment successful!"
          echo "Backend service: ${{ env.ECS_BACKEND_SERVICE }}"
          echo "Redis service: ${{ env.ECS_REDIS_SERVICE }}"
          echo "Region: ${{ env.AWS_REGION }}"

  # Job 3: Notify on Slack/Discord (optional)
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-ecs]
    if: always()
    
    steps:
      - name: üì¢ Deployment notification
        run: |
          if [ "${{ needs.deploy-ecs.result }}" == "success" ]; then
            echo "‚úÖ Deployment succeeded!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi

